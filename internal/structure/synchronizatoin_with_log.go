// Code generated by gowrap. DO NOT EDIT.
// template: https://raw.githubusercontent.com/hexdigest/gowrap/bd05dcaf6963696b62ac150a98a59674456c6c53/templates/log
// gowrap: http://github.com/hexdigest/gowrap

package structure

//go:generate gowrap gen -p go-basic-final/internal/structure -i Synchronization -t https://raw.githubusercontent.com/hexdigest/gowrap/bd05dcaf6963696b62ac150a98a59674456c6c53/templates/log -o synchronizatoin_with_log.go -l ""

import (
	"io"
	"log"
)

// SynchronizationWithLog implements Synchronization that is instrumented with logging
type SynchronizationWithLog struct {
	_stdlog, _errlog *log.Logger
	_base            Synchronization
}

// NewSynchronizationWithLog instruments an implementation of the Synchronization with simple logging
func NewSynchronizationWithLog(base Synchronization, stdout, stderr io.Writer) SynchronizationWithLog {
	return SynchronizationWithLog{
		_base:   base,
		_stdlog: log.New(stdout, "", log.LstdFlags),
		_errlog: log.New(stderr, "", log.LstdFlags),
	}
}

// Synchronize implements Synchronization
func (_d SynchronizationWithLog) Synchronize(mainDir string, subDir string) (err error) {
	_params := []interface{}{"SynchronizationWithLog: calling Synchronize with params:", mainDir, subDir}
	_d._stdlog.Println(_params...)
	defer func() {
		_results := []interface{}{"SynchronizationWithLog: Synchronize returned results:", err}
		if err != nil {
			_d._errlog.Println(_results...)
		} else {
			_d._stdlog.Println(_results...)
		}
	}()
	return _d._base.Synchronize(mainDir, subDir)
}
